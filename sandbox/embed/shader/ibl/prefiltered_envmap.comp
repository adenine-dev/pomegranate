#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform image2D equirectangular;
layout(set = 0, binding = 1, rgba32f) uniform image2D cubemapLayers[6 * 3];

const float pi = 3.1415926535897932384626433832795;

layout(push_constant) uniform PC
{
    float roughness;
    uint mip;
    uint sampleCount;
}
constants;

vec2 sampleEquirectangular(vec3 v)
{
    const vec2 invAtan = vec2(1 / (2 * pi), 1 / (pi));
    return (vec2(atan(v.y, v.x), asin(v.z)) * invAtan) + 0.5;
}

vec2 hammersely2d(uint i, uint N)
{
    uint bits = (i << 16u) | (i >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    const float rdi = float(bits) * 2.3283064365386963e-10;

    return vec2(float(i) / float(N), rdi);
}

vec3 specularD(vec2 Xi, vec3 N, float roughness)
{
    const float alphaSquared = pow(roughness, 4); // α = roughness²

    const float phi = 2.0 * pi * Xi.x;
    const float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alphaSquared - 1.0) * Xi.y));
    const float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    const vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    const vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    const vec3 tangent = normalize(cross(up, N));
    const vec3 bitangent = cross(N, tangent);

    return normalize(tangent * H.x + bitangent * H.y + N * H.z);
}

void main()
{
    const vec2 localPos = (vec2(gl_GlobalInvocationID.xy) / (imageSize(equirectangular).x / 4.0 / pow(2, constants.mip)) - 0.5) * 2;
    vec3 dir;
    // NOTE: z and y are switched because coordinate systems lmao.
    if (gl_GlobalInvocationID.z == 0)      dir = vec3( 1.0,        -localPos.x,  localPos.y); // +X
    else if (gl_GlobalInvocationID.z == 1) dir = vec3(-1.0,         localPos.x,  localPos.y); // -X
    else if (gl_GlobalInvocationID.z == 2) dir = vec3( localPos.x,  localPos.y, -1.0); // +Y
    else if (gl_GlobalInvocationID.z == 3) dir = vec3( localPos.x, -localPos.y,  1.0); // -Y
    else if (gl_GlobalInvocationID.z == 4) dir = vec3( localPos.x,  1.0,         localPos.y); // +Z
    else if (gl_GlobalInvocationID.z == 5) dir = vec3(-localPos.x, -1.0,         localPos.y); // -Z

    const vec3 N = normalize(dir);
    const vec3 R = N;
    const vec3 V = R;

    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);
    for (uint i = 0u; i < constants.sampleCount; ++i) {
        const vec2 Xi = hammersely2d(i, constants.sampleCount);
        const vec3 H = specularD(Xi, N, constants.roughness);
        const vec3 L = normalize(2.0 * dot(V, H) * H - V);

        const float NdotL = max(dot(N, L), 0.0);
        if (NdotL > 0.0) {
            prefilteredColor += imageLoad(equirectangular, ivec2(sampleEquirectangular(L) * imageSize(equirectangular))).rgb * NdotL;
            totalWeight += NdotL;
        }
    }

    imageStore(cubemapLayers[gl_GlobalInvocationID.z + (constants.mip * 6)],
               ivec2(gl_GlobalInvocationID.xy),
               vec4(prefilteredColor / totalWeight, 1.0));
}