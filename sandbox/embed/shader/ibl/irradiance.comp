#version 450

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform image2D equirectangular;
layout(set = 0, binding = 1, rgba32f) uniform image2D cubemapLayers[6];

const float pi = 3.1415926535897932384626433832795;

layout(push_constant) uniform PC
{
    float deltaTheta;
    float deltaPhi;
}
constants;

vec2 sampleEquirectangular(vec3 v)
{
    const vec2 invAtan = vec2(1/(2*pi), 1/(pi));
    return (vec2(atan(v.y, v.x), asin(v.z)) * invAtan) + 0.5;
}

void main() {
    const vec2 localPos = (vec2(gl_GlobalInvocationID.xy) / (imageSize(equirectangular).x / 4.0) - 0.5) * 2;
    vec3 normal;
    //NOTE: z and y are switched because coordinate systems lmao.
    if (gl_GlobalInvocationID.z == 0)      normal = vec3( 1.0,        -localPos.x,  localPos.y); // +X
    else if (gl_GlobalInvocationID.z == 1) normal = vec3(-1.0,         localPos.x,  localPos.y); // -X
    else if (gl_GlobalInvocationID.z == 2) normal = vec3( localPos.x,  localPos.y, -1.0);        // +Y
    else if (gl_GlobalInvocationID.z == 3) normal = vec3( localPos.x, -localPos.y,  1.0);        // -Y
    else if (gl_GlobalInvocationID.z == 4) normal = vec3( localPos.x,  1.0,         localPos.y); // +Z
    else if (gl_GlobalInvocationID.z == 5) normal = vec3(-localPos.x, -1.0,         localPos.y); // -Z

    const vec3 N = normalize(normal);

    vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), N));
    if (length(right) < 0.000001) right = vec3(1, 0, 0);
    const vec3 up = normalize(cross(N, right));

    float samples = 0;
    vec3 irradiance = vec3(0);

    for(float phi = 0.0; phi < 2.0 * pi; phi += constants.deltaPhi) {
        for(float theta = 0.0; theta < 0.5 * pi; theta += constants.deltaTheta) {
            const vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            const vec3 sampleVector = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;
        	
            irradiance += imageLoad(equirectangular, ivec2(sampleEquirectangular(normalize(sampleVector)) * imageSize(equirectangular))).rgb * cos(theta) * sin(theta);
			samples++;
        }
    }
    irradiance = pi * irradiance * (1.0 / samples);

    imageStore(cubemapLayers[gl_GlobalInvocationID.z],
        ivec2(gl_GlobalInvocationID.xy),
        vec4(irradiance, 1.0));
}