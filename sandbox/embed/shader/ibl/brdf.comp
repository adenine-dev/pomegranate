#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0, rg16f) uniform image2D brdfLut;

const float pi = 3.1415926535897932384626433832795;

vec2 hammersely2d(uint i, uint N)
{
    uint bits = (i << 16u) | (i >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    const float rdi = float(bits) * 2.3283064365386963e-10;

    return vec2(float(i) / float(N), rdi);
}

vec3 specularD(vec2 Xi, vec3 N, float roughness)
{
    const float alphaSquared = pow(roughness, 4); // α = roughness²

    const float phi = 2.0 * pi * Xi.x;
    const float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alphaSquared - 1.0) * Xi.y));
    const float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
    const vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

    const vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    const vec3 tangent = normalize(cross(up, N));
    const vec3 bitangent = cross(N, tangent);

    return normalize(tangent * H.x + bitangent * H.y + N * H.z);
}

// Specular Geometric Attenuation
// Using the Schlick model approximating the smith model.
float G1(vec3 N, vec3 V, float roughness)
{
    const float k = pow(roughness + 1, 2) / 8; // k = (Roughness + 1)² / 8 // NOTE: roughness shouldn't be +1ed with IBL
    const float NdotV = max(dot(N, V), 0);

    // G₁(V) = (N • V) / ((N • V)(1 - k) + k)
    return NdotV / (NdotV * (1 - k) + k);
}
float specularG(vec3 N, vec3 V, vec3 L, float roughness)
{
    // G(L, V, H) = G₁(V) G₁(L)
    return G1(N, V, roughness) * G1(N, L, roughness);
}

vec2 IntegrateBRDF(float NdotV, float roughness)
{
    vec3 V = vec3(sqrt(1.0 - NdotV*NdotV), 0.0, NdotV);

    float A = 0.0;
    float B = 0.0; 

    vec3 N = vec3(0.0, 0.0, 1.0);
    
    const uint SAMPLE_COUNT = 10u;
    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        const vec2 Xi = hammersely2d(i, SAMPLE_COUNT);
        const vec3 H = specularD(Xi, N, roughness);
        const vec3 L = normalize(2.0 * dot(V, H) * H - V);

        const float NdotL = max(L.z, 0.0);
        const float NdotH = max(H.z, 0.0);
        const float VdotH = max(dot(V, H), 0.0);
		
        if(NdotL > 0.0)
        {
            const float G = specularG(N, V, L, roughness);
            const float G_Vis = (G * VdotH) / ((NdotH * NdotV));
            const float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }

    return vec2(A, B) / SAMPLE_COUNT;
}

void main() {
    // NOTE: the +1s here is due to a driver bug :(
	vec2 brdf = IntegrateBRDF(float(gl_GlobalInvocationID.x + 1) / float(imageSize(brdfLut).x + 1), 
                              float(gl_GlobalInvocationID.y + 1) / float(imageSize(brdfLut).y + 1));
	
    imageStore(brdfLut, 
        ivec2(gl_GlobalInvocationID.xy), 
        vec4(brdf, 0, 1));
}